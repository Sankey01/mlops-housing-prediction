version: '3.8'

services:
  # Servicio principal de la API
  housing-api:
    build:
      context: docker
      dockerfile: Dockerfile
    image: housing-prediction-api:latest
    container_name: housing-api-container
    ports:
      - "8000:8000"
    volumes:
      # Montar logs para acceso externo
      - ./logs:/app/logs
      # Montar modelos (útil para desarrollo)
      - ./models:/app/models:ro
    environment:
      - ENVIRONMENT=docker
      - LOG_LEVEL=info
      - WORKERS=1
    healthcheck:
      test: ["CMD", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - housing-network

  # Nginx como proxy reverso (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: housing-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - housing-api
    restart: unless-stopped
    networks:
      - housing-network

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: housing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - housing-network
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: housing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - housing-network
    profiles:
      - monitoring

networks:
  housing-network:
    driver: bridge

volumes:
  grafana-storage: